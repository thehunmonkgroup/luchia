--- Core document handler class.
--
-- Implements the methods necessary to handle documents. Note that for most
-- cases, the document handling methods in @{luchia.document} should be used;
-- this module provides the core functionality that those higher-level methods
-- use.
--
-- See the @{core.document.lua} example for more detail.
--
-- @classmod luchia.core.document
-- @author Chad Phillips
-- @copyright 2011-2015 Chad Phillips

require "luchia.conf"

local json = require "cjson"
local string = require "string"
local logger = require "luchia.core.log"
local log = logger.logger

local setmetatable = setmetatable
local type = type


local _M = {}

--- Creates a new core document handler.
--
-- In order to send a document via the core server methods, a document object
-- must be created, and passed to the 'data' parameter of
-- @{luchia.core.server:request}.
--
-- @param params
--   Optional. A table with the metadata necessary to create a new document
--   object.
-- @param params.id
--   Optional. The document ID. If provided, this is copied into the document
--   itself.
-- @param params.rev
--   Optional. The document revision. If provided, this is copied into the
--   document itself.
-- @param params.document
--   Optional. A table representing the document to be stored in CouchDB. This
--   table is converted to proper JSON format before being sent to the
--   database.
-- @return A new document object.
-- @usage document = luchia.core.document:new(params)
function _M.new(self, params)
  local params = params or {}
  local document = {}
  document.id = params.id
  document.rev = params.rev
  document.document = params.document or {}
  if document.rev and not document.id then
    log:error([[id required with rev]])
  else
    -- Copy id and rev into the document object.
    document.document._id = document.id
    document.document._rev = document.rev
    setmetatable(document, self)
    self.__index = self
    log:debug([[New core document handler]])
    return document
  end
end

--- Add an inline attachment to a document.
--
-- This method should not usually be called directly, instead use the
-- higher-level @{luchia.document:add_inline_attachment}.
--
-- @param attachment
--   Required. The attachment object to add to the document, as generated by
--   @{luchia.core.attachment:new}.
-- @return The document table with the attachment added. Note that this does
--   not return the full document object.
-- @usage document_table = document:add_attachment(attachment)
function _M:add_attachment(attachment)
  if attachment and type(attachment.base64_encode_file) == "function" then
    local file_data = attachment:base64_encode_file()
    if file_data then
      -- Attachments are located under the special _attachments key of the
      -- document.
      self.document._attachments = self.document._attachments or {}
      self.document._attachments[attachment.file_name] = {
        ["content_type"] = attachment.content_type,
        data = file_data,
      }
      log:debug(string.format([[Added inline attachment: %s, content_type: %s]], attachment.file_name, attachment.content_type))
      return self.document
    else
      log:error(string.format([[Unable to encode file data for file: %s]], attachment.file_path or ""))
    end
  else
    log:error([[Invalid attachment object]])
  end
end

--- Prepare document for a server request.
--
-- This method is called by @{luchia.core.server:prepare_request_data} to allow
-- the document object to properly prepare the data for a server request.
--
-- @param server
--   Required. The server object to prepare the request for.
-- @usage document:prepare_request_data(server)
function _M:prepare_request_data(server)
  log:debug([[Preparing document request data]])
  server.content_type = "application/json"
  server.request_data = json.encode(self.document)
end

return _M
